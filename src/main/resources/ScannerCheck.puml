@startuml
legend top left

Sequence diagram containing the
creation of the customized ScannerCheck
and the call of the IScannerCheck#doPassiveScan method

end legend

autonumber
actor BurpRuntime
participant "BurpExtender" as IBurpExtender << IBurpExtender >>
participant "ScannerCheck" as IScannerCheck << IScannerCheck >>
participant "HTMLResponseReader" as HTMLResponseReader << IByteReader >>
participant "HTMLAnchorReaderObserver" as HTMLAnchorReaderObserver << IByteReaderObserver >>
participant "JSWindowsOpenReaderObserver" as JSWindowsOpenReaderObserver << IByteReaderObserver >>

activate IBurpExtender

BurpRuntime --> IBurpExtender: registerExtenderCallbacks

IBurpExtender -> IScannerCheck: new (IExtensionHelpers helpers)
activate IScannerCheck



BurpRuntime -> IScannerCheck: List<IScanIssue> doPassiveScan()

== Start of Observers Initialization ==
activate HTMLResponseReader
IScannerCheck -> HTMLResponseReader: createResponseReader()


HTMLResponseReader -> HTMLAnchorReaderObserver: new()
activate HTMLAnchorReaderObserver



HTMLResponseReader -> JSWindowsOpenReaderObserver: new()
activate JSWindowsOpenReaderObserver



HTMLResponseReader --> HTMLResponseReader: attachObservers


IScannerCheck <-- HTMLResponseReader: return createResponseReader

== End of Observer Initialization ==
IScannerCheck -> HTMLResponseReader:List<TabNabbingProblem> getProblems()

loop over each byte of the HTML response

HTMLResponseReader ->HTMLAnchorReaderObserver:Optional<TabNabbingProblem> getProblem()

group observer could ask more bytes from the IByteReader
 HTMLResponseReader <- HTMLAnchorReaderObserver: fetchMoreBytes(number of bytes to fetch)
 HTMLResponseReader --> HTMLAnchorReaderObserver: return bytes[]
end
HTMLResponseReader <--HTMLAnchorReaderObserver:return Optional<TabNabbingProblem> getProblem


HTMLResponseReader ->JSWindowsOpenReaderObserver:Optional<TabNabbingProblem> getProblem()
group observer could ask more bytes from the IByteReader
 HTMLResponseReader <- JSWindowsOpenReaderObserver: fetchMoreBytes(number of bytes to fetch)
 HTMLResponseReader --> JSWindowsOpenReaderObserver: return bytes[]
end
HTMLResponseReader <--JSWindowsOpenReaderObserver:return Optional<TabNabbingProblem> getProblem
end
IScannerCheck <-- HTMLResponseReader:return getProblem


HTMLResponseReader -> HTMLResponseReader: create List<IScanIssue>

== Start of Observers clean up ==

IScannerCheck -> HTMLResponseReader: close()
HTMLResponseReader -> HTMLAnchorReaderObserver:close()
deactivate HTMLAnchorReaderObserver

HTMLResponseReader -> JSWindowsOpenReaderObserver:close()
deactivate JSWindowsOpenReaderObserver
IScannerCheck <-- HTMLResponseReader: return close()
deactivate HTMLResponseReader
== End of Observers clean up ==

BurpRuntime <-- IScannerCheck: return doPassiveScan


@enduml